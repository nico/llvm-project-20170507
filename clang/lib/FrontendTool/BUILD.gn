declare_args() {
  # Whether to include the arc migrate tool in the clang binary.
  clang_enable_arcmt = true

  # Whether to include the static analyzer in the clang binary.
  clang_enable_static_analyzer = true
}

assert(clang_enable_static_analyzer || !clang_enable_arcmt,
       "Cannot disable static analyzer while enabling ARCMT")

static_library("FrontendTool") {
  output_name = "clangFrontendTool"
  configs += [ "//gn:clang_code" ]
  deps = [
    "//clang/lib/Basic",
    "//clang/lib/CodeGen",
    "//clang/lib/Driver",
    "//clang/lib/Frontend",
    "//clang/lib/Frontend/Rewrite",
    "//llvm/lib/Option",
    "//llvm/lib/Support",
  ]
  defines = []
  if (clang_enable_arcmt) {
    # FIXME: Make build header thingy so libclang can use this too.
    defines += [ "CLANG_ENABLE_ARCMT" ]
    deps += [ "//clang/lib/ARCMigrate" ]
  }
  if (clang_enable_static_analyzer) {
    # FIXME: Make build header thingy so libclang can use this too.
    defines += [ "CLANG_ENABLE_STATIC_ANALYZER" ]
    deps += [ "//clang/lib/StaticAnalyzer/Frontend" ]
  }
  sources = [
    "ExecuteCompilerInvocation.cpp",
  ]
}
