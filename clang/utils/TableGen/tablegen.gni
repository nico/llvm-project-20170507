# This file introduces a templates for running clang-tblgen.
# FIXME: This is almost identical to //llvm/utils/TableGen/tablegen.gni,
#        the only difference is if we invoke llvm-tblgen or clang-tblgen.
#
# Parameters:
#
#   args (required)
#       [list of strings] Flags to pass to llvm-tblgen.
#
#   output_name (optional)
#       Basename of the generated output file.
#       Defaults to target name with ".inc" appended.
#
#   td_file (optional)
#       The .td file to pass to llvm-tblgen.
#       Defaults to target name with ".td" appended.
#
#   visibility (optional)
#       GN's regular visibility attribute, see `gn help visibility`.
#
# Example of usage:
#
#   FIXME: clang example
#   tablegen("attributes_compat_func_gen") {
#     visibility = [ ":IR" ]
#     args = [ "-gen-attrs" ]
#     td_file = "AttributesCompatFunc.td"
#   }

template("tablegen") {
  assert(defined(invoker.args), "args must be defined for $target_name")

  action(target_name) {
    forward_variables_from(invoker, [ "visibility" ])

    # FIXME: In cross builds, this should depend on the host binary.
    tblgen_target = "//clang/utils/TableGen:clang-tblgen"
    tblgen_executable = get_label_info(tblgen_target, "root_out_dir") +
                        "/bin/" + get_label_info(tblgen_target, "name")
    deps = [
      tblgen_target,
    ]
    if (defined(invoker.td_file)) {
      td_file = invoker.td_file
    } else {
      td_file = "$target_name.td"
    }
    sources = [
      td_file,
    ]
    script = "//gn/run_host_binary.py"
    if (defined(invoker.output_name)) {
      gen_output = "$target_gen_dir/" + invoker.output_name
    } else {
      gen_output = "$target_gen_dir/$target_name.inc"
    }
    depfile = "$gen_output.d"
    td_file = rebase_path(td_file, root_build_dir)
    args = [
             rebase_path(tblgen_executable, root_build_dir),
             "-I",
             rebase_path("//llvm/include", root_build_dir),

             # FIXME: Let tablegen add input dir to include search path instead?
             "-I",
             get_path_info(td_file, "dir"),
             "-d",
             rebase_path(depfile, root_build_dir),
             "-o",
             rebase_path(gen_output, root_build_dir),
             td_file,
           ] + invoker.args
    outputs = [
      gen_output,
    ]
  }
}
