import("//gn/enable_threads.gni")
import("//gn/libs/xml/enable.gni")
import("//llvm/include/llvm/Config/config.gni")
import("//llvm/version.gni")

action("abi-breaking") {
  script = "//gn/write_cmake_config.py"

  sources = [
    "abi-breaking.h.cmake",
  ]
  outputs = [
    "$target_gen_dir/abi-breaking.h",
  ]
  args = [
    rebase_path(sources[0], root_out_dir),
    "-o",
    rebase_path(outputs[0], root_out_dir),

    "--values",
    "LLVM_ENABLE_ABI_BREAKING_CHECKS=",  # FIXME: flag?
    "LLVM_ENABLE_REVERSE_ITERATION=",  # FIXME: flag?
  ]
}

action("config") {
  script = "//gn/write_cmake_config.py"

  public_deps = [
    ":llvm-config",
  ]

  sources = [
    "config.h.cmake",
  ]
  outputs = [
    "$target_gen_dir/config.h",
  ]
  args = [
    rebase_path(sources[0], root_out_dir),
    "-o",
    rebase_path(outputs[0], root_out_dir),

    "--values",
    "BUG_REPORT_URL=https://bugs.llvm.org/",
    "ENABLE_BACKTRACES=1",
    "ENABLE_CRASH_OVERRIDES=1",
    "BACKTRACE_HEADER=execinfo.h",
    "HAVE_CRASHREPORTERCLIENT_H=",
    "HAVE_DECL_FE_ALL_EXCEPT=1",
    "HAVE_DECL_FE_INEXACT=1",
    "LLVM_ENABLE_DIA_SDK=",
    "HAVE_ERRNO_H=1",
    "HAVE_FCNTL_H=1",
    "HAVE_FENV_H=1",
    "HAVE_FFI_CALL=",
    "HAVE_FFI_FFI_H=",
    "HAVE_FFI_H=",
    "HAVE_LIBPFM=",
    "HAVE_LIBPSAPI=",
    "HAVE_MALLCTL=",
    "HAVE_SIGNAL_H=1",
    "HAVE_STRERROR=1",
    "HAVE_SYS_STAT_H=1",
    "HAVE_SYS_TYPES_H=1",
    "HAVE__ALLOCA=",
    "HAVE___ALLOCA=",
    "HAVE___ASHLDI3=",
    "HAVE___ASHRDI3=",
    "HAVE___CHKSTK=",
    "HAVE___CHKSTK_MS=",
    "HAVE___CMPDI2=",
    "HAVE___DIVDI3=",
    "HAVE___FIXDFDI=",
    "HAVE___FIXSFDI=",
    "HAVE___FLOATDIDF=",
    "HAVE___LSHRDI3=",
    "HAVE___MAIN=",
    "HAVE___MODDI3=",
    "HAVE___UDIVDI3=",
    "HAVE___UMODDI3=",
    "HAVE____CHKSTK=",
    "HAVE____CHKSTK_MS=",
    "HOST_LINK_VERSION=",
    "LLVM_TARGET_TRIPLE_ENV=",
    "LLVM_VERSION_INFO=",
    "LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO=1",  # FIXME: Huh? Probably make off by default?
    "PACKAGE_BUGREPORT=https://bugs.llvm.org/",
    "PACKAGE_NAME=LLVM",
    "PACKAGE_STRING=LLVM ${llvm_version}svn",
    "PACKAGE_VERSION=${llvm_version}svn",
    "PACKAGE_VENDOR=",
    "RETSIGTYPE=void",
    "LLVM_GISEL_COV_ENABLED=",
    "LLVM_GISEL_COV_PREFIX=",

    # config.h includes a redundant copy of some of the things in llvm-config.h
    # FIXME: Remove this once https://reviews.llvm.org/D46288 is in.
    "LINK_POLLY_INTO_TOOLS=",
    "LLVM_DEFAULT_TARGET_TRIPLE=$llvm_target_triple",
    "LLVM_HAS_ATOMICS=1",
    "LLVM_HOST_TRIPLE=$llvm_host_triple",
    "LLVM_USE_INTEL_JITEVENTS=",
    "LLVM_USE_OPROFILE=",
    "LLVM_VERSION_MAJOR=$llvm_version_major",
    "LLVM_VERSION_MINOR=$llvm_version_minor",
    "LLVM_VERSION_PATCH=$llvm_version_patch",
    "PACKAGE_VERSION=${llvm_version}svn",
  ]

  if (host_os == "linux") {
    args += [
      "HAVE_FUTIMENS=1",
      "HAVE_LINK_H=1",
      "HAVE_LSEEK64=1",
      "HAVE_MALLINFO=1",
      "HAVE_POSIX_FALLOCATE=1",
      "HAVE_SCHED_GETAFFINITY=1",
      "HAVE_CPU_COUNT=1",
      "HAVE_VALGRIND_VALGRIND_H=1",
    ]
  } else {
    args += [
      "HAVE_FUTIMENS=",
      "HAVE_LINK_H=",
      "HAVE_LSEEK64=",
      "HAVE_MALLINFO=",
      "HAVE_POSIX_FALLOCATE=",
      "HAVE_SCHED_GETAFFINITY=",
      "HAVE_CPU_COUNT=",
      "HAVE_VALGRIND_VALGRIND_H=",
    ]
  }

  if (host_os == "mac") {
    args += [
      "HAVE_CRASHREPORTER_INFO=1",
      "HAVE_DECL_ARC4RANDOM=1",
      "HAVE_DLADDR=1",
      "HAVE_LIBEDIT=1",
      "HAVE_MALLOC_H=",
      "HAVE_MACH_MACH_H=1",
      "HAVE_MALLOC_MALLOC_H=1",
      "HAVE_MALLOC_ZONE_STATISTICS=1",
      "HAVE_LIBXAR=1",
    ]
  } else {
    args += [
      "HAVE_CRASHREPORTER_INFO=",
      "HAVE_DECL_ARC4RANDOM=",
      "HAVE_DLADDR=",
      "HAVE_LIBEDIT=",
      "HAVE_MACH_MACH_H=",
      "HAVE_MALLOC_H=1",
      "HAVE_MALLOC_MALLOC_H=",
      "HAVE_MALLOC_ZONE_STATISTICS=",
      "HAVE_LIBXAR=",
    ]
  }

  if (host_os == "win") {
    args += [
      "HAVE_BACKTRACE=",
      "HAVE_DECL_STRERROR_S=1",  # FIXME: huh?
      "HAVE_DLFCN_H=",
      "HAVE_DLOPEN=",
      "HAVE_FUTIMES=",
      "HAVE_GETPAGESIZE=",
      "HAVE_GETRLIMIT=",
      "HAVE_GETRUSAGE=",
      "HAVE_ISATTY=",
      "HAVE_LIBPTHREAD=",
      "HAVE_PTHREAD_GETNAME_NP=",
      "HAVE_PTHREAD_SETNAME_NP=",
      "HAVE_LIBZ=",
      "HAVE_POSIX_SPAWN=",
      "HAVE_PREAD=",
      "HAVE_PTHREAD_GETSPECIFIC=",
      "HAVE_PTHREAD_H=",
      "HAVE_PTHREAD_MUTEX_LOCK=",
      "HAVE_PTHREAD_RWLOCK_INIT=",
      "HAVE_REALPATH=",
      "HAVE_SBRK=",
      "HAVE_SETENV=",
      "HAVE_SETRLIMIT=",
      "HAVE_SIGALTSTACK=",
      "HAVE_STRERROR_R=",
      "HAVE_SYSCONF=",
      "HAVE_SYS_IOCTL_H=",
      "HAVE_SYS_MMAN_H=",
      "HAVE_SYS_PARAM_H=",
      "HAVE_SYS_RESOURCE_H=",
      "HAVE_SYS_TIME_H=",
      "HAVE_TERMIOS_H=",
      "HAVE_UNISTD_H=",
      "HAVE_ZLIB_H=",
      "HAVE__CHSIZE_S=1",
      "HAVE__UNWIND_BACKTRACE=",
      "LLVM_ON_UNIX=",
      "stricmp=_stricmp",
      "strdup=_strdup",
    ]
  } else {
    # POSIX-y system defaults.
    args += [
      "HAVE_BACKTRACE=1",
      "HAVE_DECL_STRERROR_S=",
      "HAVE_DLFCN_H=1",
      "HAVE_DLOPEN=1",
      "HAVE_FUTIMES=1",
      "HAVE_GETPAGESIZE=1",
      "HAVE_GETRLIMIT=1",
      "HAVE_GETRUSAGE=1",
      "HAVE_ISATTY=1",
      "HAVE_LIBPTHREAD=1",
      "HAVE_PTHREAD_GETNAME_NP=1",
      "HAVE_PTHREAD_SETNAME_NP=1",
      "HAVE_LIBZ=1",
      "HAVE_POSIX_SPAWN=1",
      "HAVE_PREAD=1",
      "HAVE_PTHREAD_GETSPECIFIC=1",
      "HAVE_PTHREAD_H=1",
      "HAVE_PTHREAD_MUTEX_LOCK=1",
      "HAVE_PTHREAD_RWLOCK_INIT=1",
      "HAVE_REALPATH=1",
      "HAVE_SBRK=1",
      "HAVE_SETENV=1",
      "HAVE_SETRLIMIT=1",
      "HAVE_SIGALTSTACK=1",
      "HAVE_STRERROR_R=1",
      "HAVE_SYSCONF=1",
      "HAVE_SYS_IOCTL_H=1",
      "HAVE_SYS_MMAN_H=1",
      "HAVE_SYS_PARAM_H=1",
      "HAVE_SYS_RESOURCE_H=1",
      "HAVE_SYS_TIME_H=1",
      "HAVE_TERMIOS_H=1",
      "HAVE_UNISTD_H=1",
      "HAVE_ZLIB_H=1",
      "HAVE__CHSIZE_S=",
      "HAVE__UNWIND_BACKTRACE=1",
      "LLVM_ON_UNIX=1",
      "stricmp=",
      "strdup=",
    ]
  }

  if (host_os == "linux") {
    args += [ "LTDL_SHLIB_EXT=.so" ]
  } else if (host_os == "mac") {
    args += [ "LTDL_SHLIB_EXT=.dylib" ]
  } else if (host_os == "win") {
    args += [ "LTDL_SHLIB_EXT=.dll" ]
  }

  if (llvm_enable_terminfo) {
    args += [ "HAVE_TERMINFO=1" ]
  } else {
    args += [ "HAVE_TERMINFO=" ]
  }

  if (llvm_enable_threads) {
    args += [ "LLVM_ENABLE_THREADS=1" ]
  } else {
    args += [ "LLVM_ENABLE_THREADS=" ]
  }

  if (llvm_enable_zlib) {
    args += [ "LLVM_ENABLE_ZLIB=1" ]
  } else {
    args += [ "LLVM_ENABLE_ZLIB=" ]
  }

  if (llvm_enable_libxml2) {
    args += [ "LLVM_LIBXML2_ENABLED=1" ]
  } else {
    args += [ "LLVM_LIBXML2_ENABLED=" ]
  }
}

action("llvm-config") {
  script = "//gn/write_cmake_config.py"

  sources = [
    "llvm-config.h.cmake",
  ]
  outputs = [
    "$target_gen_dir/llvm-config.h",
  ]
  args = [
    rebase_path(sources[0], root_out_dir),
    "-o",
    rebase_path(outputs[0], root_out_dir),

    "--values",
    "LLVM_ENABLE_DUMP=",  # FIXME: flag?
    "LINK_POLLY_INTO_TOOLS=",
    "LLVM_DEFAULT_TARGET_TRIPLE=$llvm_target_triple",
    "LLVM_HAS_ATOMICS=1",
    "LLVM_HOST_TRIPLE=$llvm_host_triple",
    "LLVM_NATIVE_ARCH=X86",  # FIXME
    "LLVM_NATIVE_ASMPARSER=1",
    "LLVM_NATIVE_ASMPRINTER=1",
    "LLVM_NATIVE_DISASSEMBLER=1",
    "LLVM_NATIVE_TARGET=1",
    "LLVM_NATIVE_TARGETINFO=1",
    "LLVM_NATIVE_TARGETMC=1",
    "LLVM_USE_INTEL_JITEVENTS=",
    "LLVM_USE_OPROFILE=",
    "LLVM_VERSION_MAJOR=$llvm_version_major",
    "LLVM_VERSION_MINOR=$llvm_version_minor",
    "LLVM_VERSION_PATCH=$llvm_version_patch",
    "PACKAGE_VERSION=${llvm_version}svn",
    "LLVM_FORCE_ENABLE_STATS=",
  ]

  if (host_os == "win") {
    args += [ "LLVM_ON_UNIX=" ]
  } else {
    args += [ "LLVM_ON_UNIX=1" ]
  }

  if (llvm_enable_threads) {
    args += [ "LLVM_ENABLE_THREADS=1" ]
  } else {
    args += [ "LLVM_ENABLE_THREADS=" ]
  }
}
