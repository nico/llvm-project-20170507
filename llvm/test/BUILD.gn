import("//llvm/include/llvm/Config/config.gni")
import("//llvm/lib/DebugInfo/PDB/enable_dia.gni")
import("//llvm/lib/Target/targets.gni")
import("//gn/enable_threads.gni")
import("//gn/buildflags.gni")
import("//gn/libs/xml/enable.gni")

template("write_lit_config") {
  action(target_name) {
    script = "//gn/write_version_inc.py"  # FIXME: rename
    input = invoker.input
    output = invoker.output

    sources = [
      input,
    ]

    targets_to_build = ""
    foreach(target, llvm_targets_to_build) {
      targets_to_build = "$targets_to_build $target"
    }

    args = [
      rebase_path(input, root_out_dir),
      "-o",
      rebase_path(output, root_out_dir),
      "--from_to",

      # FIXME: Do all these paths have to be absolute?
      # FIXME: Get all paths from a central gni file (or one per project)

      "@LIT_SITE_CFG_IN_HEADER@=## Autogenerated from $input, do not edit",
      "@LLVM_HOST_TRIPLE@=$llvm_host_triple",
      "@TARGET_TRIPLE@=$llvm_target_triple",
      "@LLVM_SOURCE_DIR@=" + rebase_path("//llvm"),  # FIXME: assumes monorepo
      "@LLVM_BINARY_DIR@=" +
          rebase_path(get_label_info("//llvm", "target_out_dir")),
      "@LLVM_TOOLS_DIR@=" + rebase_path("$root_out_dir/bin"),
      "@LLVM_LIBRARY_DIR@=" + rebase_path("$root_out_dir/lib"),
      "@SHLIBDIR@=" + rebase_path("$root_out_dir/lib"),  # FIXME: bin on windows
      "@LLVM_LIT_TOOLS_DIR@=",  # Intentionally empty, matches cmake build.
      "@PYTHON_EXECUTABLE@=$python_path",

      "@GOLD_EXECUTABLE@=",  # FIXME!
      "@LD64_EXECUTABLE@=",  # FIXME!

      "@LLVM_TOOL_LTO_BUILD@=1",
      "@OCAMLFIND@=OCAMLFIND-NOTFOUND",
      "@HAVE_OCAMLOPT@=0",
      "@HAVE_OCAML_OUNIT@=0",
      "@OCAMLFLAGS@=",
      "@LLVM_INCLUDE_GO_TESTS@=0",
      "@GO_EXECUTABLE@=",
      "@ENABLE_SHARED@=0",  # Must be 0.
      "@TARGETS_TO_BUILD@=$targets_to_build",
      "@LLVM_NATIVE_ARCH@=$native_target",
      "@LLVM_BINDINGS@=",
      "@HOST_CC@=cc",  # FIXME: better
      "@HOST_CXX@=c++",  # FIXME: better
      "@HOST_LDFLAGS@=",
      "@LLVM_USE_INTEL_JITEVENTS@=0",
      "@LLVM_USE_SANITIZER@=",
      "@HAVE_LIBXAR@=0",  # FIXME!
      "@LLVM_ENABLE_FFI@=0",
      "@BUILD_SHARED_LIBS@=0",
      "@LLVM_LINK_LLVM_DYLIB@=0",
      "@HOST_ARCH@=x86_64",  # FIXME: better
      "@LLVM_HAVE_OPT_VIEWER_MODULES@=0",
      "@LLVM_BUILD_MODE@=.",
    ]

    if (host_os == "mac") {
      args += [
        "@SHLIBEXT@=.dylib",
        "@EXEEXT@=",
        "@HOST_OS@=Darwin",
      ]
    } else if (host_os == "linux") {
      args += [
        "@SHLIBEXT@=.so",
        "@EXEEXT@=",
        "@HOST_OS@=Linux",
      ]
    } else if (host_os == "win") {
      args += [
        "@SHLIBEXT@=.dll",
        "@EXEEXT@=.exe",
        "@HOST_OS@=Windows",
      ]
    }

    if (llvm_enable_assertions) {
      args += [ "@ENABLE_ASSERTIONS@=1" ]
    } else {
      args += [ "@ENABLE_ASSERTIONS@=0" ]  # Must be 0.
    }

    if (llvm_enable_dia_sdk) {
      args += [ "@LLVM_ENABLE_DIA_SDK@=1" ]
    } else {
      args += [ "@LLVM_ENABLE_DIA_SDK@=0" ]  # Must be 0.
    }

    if (llvm_enable_libxml2) {
      args += [ "@LLVM_LIBXML2_ENABLED@=1" ]
    } else {
      args += [ "@LLVM_LIBXML2_ENABLED@=" ]  # Must be empty.
    }

    if (llvm_enable_threads) {
      args += [ "@LLVM_ENABLE_THREADS@=1" ]
    } else {
      args += [ "@LLVM_ENABLE_THREADS@=0" ]  # Must be 0.
    }

    if (llvm_enable_zlib) {
      args += [ "@HAVE_LIBZ@=1" ]
    } else {
      args += [ "@HAVE_LIBZ@=0" ]  # Must be 0.
    }

    outputs = [
      output,
    ]
  }
}

lit_site_cfg_file = "$root_gen_dir/llvm/test/lit.site.cfg.py"
write_lit_config("lit_site_cfg") {
  input = "//llvm/test/lit.site.cfg.py.in"
  output = lit_site_cfg_file
}

lit_unit_site_cfg_file = "$root_gen_dir/llvm/test/Unit/lit.site.cfg.py"
write_lit_config("lit_unit_site_cfg") {
  input = "//llvm/test/Unit/lit.site.cfg.py.in"
  output = lit_unit_site_cfg_file
}

action("check-llvm") {
  script = "$root_out_dir/llvm-lit"
  if (host_os == "win") {
    script += ".py"
  }
  args = [
    "-sv",
    "--param",
    "llvm_site_config=" + rebase_path(lit_site_cfg_file, root_out_dir),
    "--param",
    "llvm_unit_site_config=" +
        rebase_path(lit_unit_site_cfg_file, root_out_dir),
    rebase_path(".", root_out_dir),
  ]
  outputs = [
    "$target_gen_dir/run-lit",  # Non-existing, so that ninja runs it each time.
  ]

  # Since check-llvm is always dirty, //:default doesn't depend on it so that
  # it's not part of the default ninja target.  Hence, check-llvm shouldn't
  # have any deps except :test. so that the default target is sure to build
  # all the deps.
  deps = [
    ":test",
  ]
  testonly = true

  pool = "//:console"
}

# This target should contain all dependencies of check-llvm.
# //:default depends on it, so that ninja's default target builds all
# prerequisites for check-llvm but doesn't run check-llvm itself.
group("test") {
  deps = [
    ":lit_site_cfg",
    ":lit_unit_site_cfg",
    "//llvm/lib/LineEditor",
    "//llvm/tools/bugpoint",
    "//llvm/tools/dsymutil",
    "//llvm/tools/llc",
    "//llvm/tools/lli",
    "//llvm/tools/lli/ChildTarget:lli-child-target",
    "//llvm/tools/llvm-ar:symlinks",
    "//llvm/tools/llvm-as",
    "//llvm/tools/llvm-bcanalyzer",
    "//llvm/tools/llvm-c-test",
    "//llvm/tools/llvm-cat",
    "//llvm/tools/llvm-cfi-verify",
    "//llvm/tools/llvm-cov",
    "//llvm/tools/llvm-cvtres",
    "//llvm/tools/llvm-cxxdump",
    "//llvm/tools/llvm-cxxfilt",
    "//llvm/tools/llvm-cxxmap",
    "//llvm/tools/llvm-diff",
    "//llvm/tools/llvm-dis",
    "//llvm/tools/llvm-dwarfdump",
    "//llvm/tools/llvm-dwp",
    "//llvm/tools/llvm-extract",
    "//llvm/tools/llvm-isel-fuzzer",
    "//llvm/tools/llvm-link",
    "//llvm/tools/llvm-lto",
    "//llvm/tools/llvm-lto2",
    "//llvm/tools/llvm-mc",
    "//llvm/tools/llvm-mca",
    "//llvm/tools/llvm-modextract",
    "//llvm/tools/llvm-mt",
    "//llvm/tools/llvm-nm",
    "//llvm/tools/llvm-objcopy:symlinks",
    "//llvm/tools/llvm-objdump",
    "//llvm/tools/llvm-opt-fuzzer",
    "//llvm/tools/llvm-opt-report",
    "//llvm/tools/llvm-pdbutil",
    "//llvm/tools/llvm-profdata",
    "//llvm/tools/llvm-rc",
    "//llvm/tools/llvm-readobj:symlinks",
    "//llvm/tools/llvm-rtdyld",
    "//llvm/tools/llvm-size",
    "//llvm/tools/llvm-split",
    "//llvm/tools/llvm-strings",
    "//llvm/tools/llvm-symbolizer",
    "//llvm/tools/llvm-undname",
    "//llvm/tools/llvm-xray",
    "//llvm/tools/obj2yaml",
    "//llvm/tools/opt",
    "//llvm/tools/sancov",
    "//llvm/tools/sanstats",
    "//llvm/tools/verify-uselistorder",
    "//llvm/tools/yaml2obj",
    "//llvm/unittests",
    "//llvm/utils/FileCheck",
    "//llvm/utils/TableGen:llvm-tblgen",
    "//llvm/utils/count",
    "//llvm/utils/not",

    # llvm-config wants libgtest_main.a to exist at runtime when run as in
    # its tests, but nothing in the tree depends on them.
    "//llvm/utils/unittest/UnitTestMain:gtest_main",
    "//llvm/utils/yaml-bench",
  ]
  if (host_os != "win") {
    # loadable_modules don't work on Windows.
    # FIXME: In the CMake build, ENABLE_SHARED makes them work somehow
    # (but they're off by default there too).
    deps += [
      "//llvm/lib/Transforms/Hello",
      "//llvm/tools/bugpoint-passes",
    ]
  }
  testonly = true
}
