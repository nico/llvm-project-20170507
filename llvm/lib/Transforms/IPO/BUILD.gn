static_library("IPO") {
  output_name = "LLVMipo"
  deps = [
    "//llvm/include/llvm/IR:tablegen",
    "//llvm/lib/Transforms/AggressiveInstCombine",
    "//llvm/lib/Analysis",
    "//llvm/lib/Bitcode/Reader",
    "//llvm/lib/Bitcode/Writer",
    "//llvm/lib/IR",
    "//llvm/lib/Transforms/InstCombine",
    "//llvm/lib/IRReader",
    "//llvm/lib/Linker",
    "//llvm/lib/Object",
    "//llvm/lib/ProfileData",
    "//llvm/lib/Transforms/Scalar",
    "//llvm/lib/Support",
    "//llvm/lib/Transforms/Utils",
    "//llvm/lib/Transforms/Vectorize",
    "//llvm/lib/Transforms/Instrumentation",
  ]
  sources = [
    "AlwaysInliner.cpp",
    "ArgumentPromotion.cpp",
    "BarrierNoopPass.cpp",
    "BlockExtractor.cpp",
    "CalledValuePropagation.cpp",
    "ConstantMerge.cpp",
    "CrossDSOCFI.cpp",
    "DeadArgumentElimination.cpp",
    "ElimAvailExtern.cpp",
    "ExtractGV.cpp",
    "ForceFunctionAttrs.cpp",
    "FunctionAttrs.cpp",
    "FunctionImport.cpp",
    "GlobalDCE.cpp",
    "GlobalOpt.cpp",
    "GlobalSplit.cpp",
    "IPConstantPropagation.cpp",
    "IPO.cpp",
    "InferFunctionAttrs.cpp",
    "InlineSimple.cpp",
    "Inliner.cpp",
    "Internalize.cpp",
    "LoopExtractor.cpp",
    "LowerTypeTests.cpp",
    "MergeFunctions.cpp",
    "PartialInlining.cpp",
    "PassManagerBuilder.cpp",
    "PruneEH.cpp",
    "SampleProfile.cpp",
    "SCCP.cpp",
    "StripDeadPrototypes.cpp",
    "StripSymbols.cpp",
    "SyntheticCountsPropagation.cpp",
    "ThinLTOBitcodeWriter.cpp",
    "WholeProgramDevirt.cpp",
  ]
}
