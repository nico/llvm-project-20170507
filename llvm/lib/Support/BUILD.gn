declare_args() {
  # Wether to link against terminfo.
  llvm_enable_terminfo = true

  # Wether to link against zlib.
  llvm_enable_zlib = true
}

static_library("Support") {
  output_name = "LLVMSupport"
  deps = [
    "//gn:pthread",
    "//llvm/lib/Demangle",
  ]
  include_dirs = [
    "Unix",
    "Windows",
  ]
  sources = [
    "AMDGPUMetadata.cpp",
    "APFloat.cpp",
    "APInt.cpp",
    "APSInt.cpp",
    "ARMAttributeParser.cpp",
    "ARMBuildAttrs.cpp",
    "ARMWinEH.cpp",
    "Allocator.cpp",
    "BinaryStreamError.cpp",
    "BinaryStreamReader.cpp",
    "BinaryStreamRef.cpp",
    "BinaryStreamWriter.cpp",
    "BlockFrequency.cpp",
    "BranchProbability.cpp",
    "COM.cpp",
    "CachePruning.cpp",
    "Chrono.cpp",
    "CodeGenCoverage.cpp",
    "CommandLine.cpp",
    "Compression.cpp",
    "ConvertUTF.cpp",
    "ConvertUTFWrapper.cpp",
    "CrashRecoveryContext.cpp",
    "DAGDeltaAlgorithm.cpp",
    "DJB.cpp",
    "DataExtractor.cpp",
    "Debug.cpp",
    "DebugCounter.cpp",
    "DeltaAlgorithm.cpp",
    "Error.cpp",
    "ErrorHandling.cpp",
    "FileOutputBuffer.cpp",
    "FileUtilities.cpp",
    "FoldingSet.cpp",
    "FormatVariadic.cpp",
    "FormattedStream.cpp",
    "GlobPattern.cpp",
    "GraphWriter.cpp",
    "Hashing.cpp",
    "IntEqClasses.cpp",
    "IntervalMap.cpp",
    "JamCRC.cpp",
    "KnownBits.cpp",
    "LEB128.cpp",
    "LineIterator.cpp",
    "Locale.cpp",
    "LockFileManager.cpp",
    "LowLevelType.cpp",
    "MD5.cpp",
    "ManagedStatic.cpp",
    "MathExtras.cpp",
    "MemoryBuffer.cpp",
    "NativeFormatting.cpp",
    "Options.cpp",
    "Parallel.cpp",
    "PluginLoader.cpp",
    "PrettyStackTrace.cpp",
    "RandomNumberGenerator.cpp",
    "Regex.cpp",
    "SHA1.cpp",
    "ScaledNumber.cpp",
    "ScopedPrinter.cpp",
    "SmallPtrSet.cpp",
    "SmallVector.cpp",
    "SourceMgr.cpp",
    "SpecialCaseList.cpp",
    "Statistic.cpp",
    "StringExtras.cpp",
    "StringMap.cpp",
    "StringPool.cpp",
    "StringRef.cpp",
    "StringSaver.cpp",
    "SystemUtils.cpp",
    "TarWriter.cpp",
    "TargetParser.cpp",
    "ThreadPool.cpp",
    "Timer.cpp",
    "ToolOutputFile.cpp",
    "TrigramIndex.cpp",
    "Triple.cpp",
    "Twine.cpp",
    "Unicode.cpp",
    "UnicodeCaseFold.cpp",
    "WithColor.cpp",
    "YAMLParser.cpp",
    "YAMLTraits.cpp",
    "circular_raw_ostream.cpp",
    "raw_os_ostream.cpp",
    "raw_ostream.cpp",
    "regcomp.c",
    "regerror.c",
    "regexec.c",
    "regfree.c",
    "regstrlcpy.c",
    "xxhash.cpp",

    # System
    "Atomic.cpp",
    "DynamicLibrary.cpp",
    "Errno.cpp",
    "Host.cpp",
    "Memory.cpp",
    "Mutex.cpp",
    "Path.cpp",
    "Process.cpp",
    "Program.cpp",
    "RWMutex.cpp",
    "Signals.cpp",
    "TargetRegistry.cpp",
    "ThreadLocal.cpp",
    "Threading.cpp",
    "Valgrind.cpp",
    "Watchdog.cpp",
  ]

  defines = []
  libs = []

  if (host_os == "linux") {
    libs += [ "dl" ]
  }

  # FIXME: Use feature headers instead of flags?
  if (llvm_enable_terminfo) {
    defines += [ "HAVE_TERMINFO" ]
    libs += [ "ncurses" ]
  }
  if (llvm_enable_terminfo) {
    defines += [
      "HAVE_ZLIB_H",
      "LLVM_ENABLE_ZLIB",
    ]
    libs += [ "z" ]
  }
}
