import("//gn/buildflags.gni")
import("//gn/mac_sdk.gni")

declare_args() {
  # Whether to enable threading.
  llvm_enable_threads = host_os != "win"  # FIXME: win threading
}

# args that depend on other args must live in a later declare_args() block.
declare_args() {
  # Whether to enable assertions.
  llvm_enable_assertions = is_debug
}

config("compiler_defaults") {
  # FIXME: Don't define this globally here.
  if (host_os != "win") {
    defines = [ "LLVM_ON_UNIX" ]
  } else {
    defines = [ "LLVM_ON_WIN32" ]
  }
  if (!llvm_enable_assertions) {
    defines += [ "NDEBUG" ]
  }

  cflags = []

  if (host_os == "mac") {
    cflags += [
      # FIXME: probably only do this if clang_base_path is set.
      "-isysroot",
      mac_sdk,
    ]
  }

  if (host_os != "win") {
    if (is_debug) {
      cflags += [ "-g" ]
    } else {
      cflags += [ "-O3" ]
    }
    cflags_cc = [ "-std=c++11" ]
  } else {
    if (is_debug) {
      cflags += [ "/Zi" ]
    } else {
      cflags += [ "/O2" ]
    }
    cflags += [
      "/EHsc",

      # Suppress ''modifier' : used more than once' (__forceinline and inline).
      "-wd4141",

      # Suppress 'conversion from 'type1' to 'type2', possible loss of data'.
      "-wd4244", 

      # Suppress 'no matching operator delete found'.
      "-wd4291",


    ]
  }
}

config("llvm_code") {
  include_dirs = [
    "//llvm/include",
    "$root_gen_dir/llvm/include",
  ]
}

config("lld_code") {
  include_dirs = [
    "//lld/include",
    "$root_gen_dir/lld/include",
  ]
}

config("clang_code") {
  include_dirs = [
    "//clang/include",
    "$root_gen_dir/clang/include",
  ]
}

config("pthread_config") {
  visibility = [ ":pthread" ]
  libs = [ "pthread" ]

  # FIXME: currently must match config.h
  defines = [ "LLVM_ENABLE_THREADS" ]
}

group("pthread") {
  if (llvm_enable_threads) {
    public_configs = [ ":pthread_config" ]
  }
}
