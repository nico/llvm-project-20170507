declare_args() {
  # Whether to use goma (https://chromium.googlesource.com/infra/goma/client/)
  use_goma = false

  # If is_goma is true, the location of the goma client install.
  # FIXME: make default to C:\src\goma\goma-win64 on Windows
  if (host_os == "win") {
    goma_dir = "c:\src\goma\goma-win64"
  } else {
    goma_dir = getenv("HOME") + "/goma"
  }

  # Set this to a clang build directory. If set, that clang is used as compiler.
  # goma only works with compiler binaries it knows about, so useful both for
  # using a goma-approved compiler and for compiling clang with a locally-built
  # clang in a different build directory.
  clang_base_path = ""
}

toolchain("posix") {
  cc = "cc"
  cxx = "c++"

  if (clang_base_path != "") {
    cc = "$clang_base_path/bin/clang"
    cxx = "$clang_base_path/bin/clang++"
  }

  ld = cxx  # Don't use goma wrapper for linking.
  if (use_goma) {
    cc = "$goma_dir/gomacc $cc"
    cxx = "$goma_dir/gomacc $cxx"
  }

  tool("cc") {
    depfile = "{{output}}.d"
    command = "$cc -MMD -MF $depfile -o {{output}} -c {{source}} {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
    depsformat = "gcc"
    description = "CC {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    command = "$cxx -MMD -MF $depfile -o {{output}} -c {{source}} {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"
    depsformat = "gcc"
    description = "CXX {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("alink") {
    if (host_os == "mac") {
      command = "libtool -static {{arflags}} -o {{output}} {{inputs}}"
    } else {
      command = "ar rcsDT {{arflags}} -o {{output}} {{inputs}}"
    }
    description = "LIBTOOL-STATIC {{output}}"
    outputs = [
      "{{target_out_dir}}/{{target_output_name}}.a",
    ]
    output_prefix = "lib"
  }

  tool("solink") {
    outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    command = "$ld -shared {{ldflags}} -o $outfile {{libs}} {{inputs}}"
    description = "SOLINK $outfile"
    outputs = [
      outfile,
    ]
    lib_switch = "-l"
    output_prefix = "lib"
    default_output_dir = "{{root_out_dir}}/lib"
    if (host_os == "mac") {
      default_output_extension = ".dylib"
    } else {
      default_output_extension = ".so"
    }
  }

  tool("link") {
    outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    if (host_os == "mac") {
      command = "$ld {{ldflags}} -o $outfile {{libs}} {{inputs}}"
    } else {
      command = "$ld {{ldflags}} -o $outfile {{libs}} -Wl,--start-group {{inputs}} -Wl,--end-group"
    }
    description = "LINK $outfile"
    outputs = [
      outfile,
    ]
    lib_switch = "-l"

    # Setting this allows targets to override the default executable output by
    # setting output_dir.
    default_output_dir = "{{root_out_dir}}/bin"
  }

  tool("copy") {
    command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
    description = "COPY {{source}} {{output}}"
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }
}

toolchain("win") {
  cl = "cl"

  if (clang_base_path != "") {
    cl = "$clang_base_path/bin/clang-cl"
  }

  if (use_goma) {
    cl = "$goma_dir/gomacc $cl"
  }

  tool("cc") {
    command = "$cl /nologo /showIncludes /Fo{{output}} /c {{source}} {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
    depsformat = "msvc"
    description = "CC {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
    ]
  }

  tool("cxx") {
    command = "$cl /nologo /showIncludes /Fo{{output}} /c {{source}} {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"
    depsformat = "msvc"
    description = "CXX {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
    ]
  }

  tool("alink") {
    command = "lib /nologo {{arflags}} /out:{{output}} {{inputs}}"
    description = "LIB {{output}}"
    outputs = [
      "{{target_out_dir}}/{{target_output_name}}.lib",
    ]
  }

  tool("solink") {
    outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    command = "link /nologo /dll {{ldflags}} /out:$outfile {{libs}} /pdb:$outfile.pdb {{inputs}}"
    description = "LINK $outfile"
    outputs = [
      outfile,
    ]
    default_output_extension = ".dll"
    default_output_dir = "{{root_out_dir}}/lib"
  }

  tool("link") {
    outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    command = "link /nologo {{ldflags}} /out:$outfile {{libs}} /pdb:$outfile.pdb {{inputs}}"
    description = "LINK $outfile"
    outputs = [
      outfile,
    ]
    default_output_extension = ".exe"

    # Setting this allows targets to override the default executable output by
    # setting output_dir.
    default_output_dir = "{{root_out_dir}}/bin"
  }

  tool("copy") {
    command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"  # FIXME
    description = "COPY {{source}} {{output}}"
  }

  tool("stamp") {
    command = "cmd /c type nul > {{output}}"
    description = "STAMP {{output}}"
  }
}
