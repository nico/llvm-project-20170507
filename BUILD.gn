import("//clang/lib/ARCMigrate/enable.gni")

group("default") {
  deps = [
    "//clang/test",
    "//clang/tools/c-index-test",
    "//clang/tools/clang-check",
    "//clang/tools/clang-diff",
    "//clang/tools/clang-format",
    "//clang/tools/clang-func-mapping",
    "//clang/tools/clang-import-test",
    "//clang/tools/clang-offload-bundler",
    "//clang/tools/clang-refactor",
    "//clang/tools/clang-rename",
    "//clang/tools/diagtool",
    "//clang/tools/driver:symlinks",
    "//clang/tools/libclang",
    "//lld/test",
    "//lld/tools/lld:symlinks",
    "//llvm/test",
    "//llvm/tools/bugpoint",
    "//llvm/tools/dsymutil",
    "//llvm/tools/llc",
    "//llvm/tools/lli",
    "//llvm/tools/lli/ChildTarget:lli-child-target",
    "//llvm/tools/llvm-ar:symlinks",
    "//llvm/tools/llvm-as",
    "//llvm/tools/llvm-bcanalyzer",
    "//llvm/tools/llvm-c-test",
    "//llvm/tools/llvm-cat",
    "//llvm/tools/llvm-cfi-verify",
    "//llvm/tools/llvm-cov",
    "//llvm/tools/llvm-cvtres",
    "//llvm/tools/llvm-cxxdump",
    "//llvm/tools/llvm-cxxfilt",
    "//llvm/tools/llvm-diff",
    "//llvm/tools/llvm-dis",
    "//llvm/tools/llvm-dwarfdump",
    "//llvm/tools/llvm-dwp",
    "//llvm/tools/llvm-extract",
    "//llvm/tools/llvm-isel-fuzzer",
    "//llvm/tools/llvm-link",
    "//llvm/tools/llvm-lto",
    "//llvm/tools/llvm-lto2",
    "//llvm/tools/llvm-mc",
    "//llvm/tools/llvm-mca",
    "//llvm/tools/llvm-modextract",
    "//llvm/tools/llvm-mt",
    "//llvm/tools/llvm-nm",
    "//llvm/tools/llvm-objcopy:symlinks",
    "//llvm/tools/llvm-objdump",
    "//llvm/tools/llvm-opt-fuzzer",
    "//llvm/tools/llvm-opt-report",
    "//llvm/tools/llvm-pdbutil",
    "//llvm/tools/llvm-profdata",
    "//llvm/tools/llvm-rc",
    "//llvm/tools/llvm-readobj:symlinks",
    "//llvm/tools/llvm-rtdyld",
    "//llvm/tools/llvm-size",
    "//llvm/tools/llvm-split",
    "//llvm/tools/llvm-strings",
    "//llvm/tools/llvm-symbolizer",
    "//llvm/tools/llvm-xray",
    "//llvm/tools/obj2yaml",
    "//llvm/tools/opt",
    "//llvm/tools/sancov",
    "//llvm/tools/sanstats",
    "//llvm/tools/verify-uselistorder",
    "//llvm/tools/yaml2obj",
    "//llvm/utils/FileCheck",
    "//llvm/utils/TableGen:llvm-tblgen",
    "//llvm/utils/count",
    "//llvm/utils/not",
    "//llvm/utils/yaml-bench",
  ]
  if (clang_enable_arcmt) {
    deps += [
      "//clang/tools/arcmt-test",
      "//clang/tools/c-arcmt-test",
    ]
  }
  testonly = true
}

# Symlink handling.
# On POSIX, symlinks to the target can be created before the target exist,
# and the target can depend on the symlink targets, so that building the
# target ensures the symlinks exist.
# However, symlinks didn't exist on Windows until recently, so there the
# binary needs to be copied -- which requires it to exist. So the symlink step
# needs to run after the target creates.  In the cmake build, this is done
# via a "postbuild" on the target, which just tacks on
# "&& copy out.exe out2.exe" to the link command.  GN doesn't have a way to
# express postbuild commands.  It could probably be emulated by having the link
# command in the toolchain be a wrapper script that reads a ".symlinks" file
# next to the target, and have an action write that and make the target depend
# on that, but then every single link has to use the wrapper (unless we do
# further acrobatics to use a different toolchain for targets that need
# symlinks) even though most links don't need symlinks.
# Instead, have a top-level target for each target that needs symlinks, and
# make that depend on the symlinks. Then the symlinks can depend on the
# executable.  This has the effect that `ninja clang` builds clang and then
# creates symlinks (via this target), while `ninja bin/clang` only builds clang
# and doesn't update symlinks (in particular, on Windows it doesn't copy the
# new clang to its new locations); also `ninja clang-cl` will build clang and
# copy it (on Windows) to clang-cl, but it won't copy it to clang++.
# That seems simpler, more explicit, and good enough..
group("clang") {
  deps = [
    "//clang/tools/driver:symlinks",
  ]
}
group("lld") {
  deps = [
    "//lld/tools/lld:symlinks",
  ]
}
group("llvm-ar") {
  deps = [
    "//llvm/tools/llvm-ar:symlinks",
  ]
}
group("llvm-objcopy") {
  deps = [
    "//llvm/tools/llvm-objcopy:symlinks",
  ]
}
group("llvm-readobj") {
  deps = [
    "//llvm/tools/llvm-readobj:symlinks",
  ]
}

# A pool called "console" in the root BUILD.gn is magic and represents ninja's
# built-in console pool. (Requires a GN with `gn --version` >= 552353.)
pool("console") {
  depth = 1
}
