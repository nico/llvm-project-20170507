template("write_lit_config") {
  action(target_name) {
    script = "//gn/write_version_inc.py"  # FIXME: rename
    input = invoker.input
    output = invoker.output

    sources = [
      input,
    ]
    args = [
      rebase_path(input, root_out_dir),
      "-o",
      rebase_path(output, root_out_dir),
      "--from_to",

      # FIXME: Do all these paths have to be absolute?
      # FIXME: Get all paths from a central gni file (or one per project)

      "@HAVE_LIBZ@=1",  # FIXME: get from gni file
      "@LIT_SITE_CFG_IN_HEADER@=## Autogenerated from $input, do not edit",

      # FIXME: Why is this a toggle? It always gets the same value everywhere.
      "@LIT_SITE_CFG_IN_FOOTER@=import lit.llvm; lit.llvm.initialize(lit_config, config)",
      "@LLD_BINARY_DIR@=" +
          rebase_path(get_label_info("//lld", "target_out_dir")),
      "@LLD_SOURCE_DIR@=" + rebase_path("//lld"),
      "@LLVM_BINARY_DIR@=" +
          rebase_path(get_label_info("//llvm", "target_out_dir")),
      "@LLVM_BUILD_MODE@=.",
      "@LLVM_ENABLE_DIA_SDK@=0",  # FIXME: get from gni file
      "@LLVM_LIBRARY_OUTPUT_INTDIR@=",  # FIXME: for shared builds only (?)
      "@LLVM_LIBS_DIR@=",  # needed only for shared builds
      "@LLVM_LIBXML2_ENABLED@=1",  # FIXME: get from gni file
      "@LLVM_LIT_TOOLS_DIR@=",  # Intentionally empty, matches cmake build.
      "@LLVM_RUNTIME_OUTPUT_INTDIR@=" + rebase_path(root_out_dir),  # FIXME: bin/?
      "@LLVM_SOURCE_DIR@=" + rebase_path("//llvm"),  # FIXME: assumes monorepo
      "@LLVM_TOOLS_DIR@=" + rebase_path(root_out_dir),  # FIXME: bin/
      "@PYTHON_EXECUTABLE@=python",  # FIXME: windows...
      "@TARGET_TRIPLE@=i386-apple-darwin16.7.0",  # FIXME: better
    ]
    outputs = [
      output,
    ]
  }
}

lit_site_cfg_file = "$root_gen_dir/lld/test/lit.site.cfg.py"
write_lit_config("lit_site_cfg") {
  input = "//lld/test/lit.site.cfg.py.in"
  output = lit_site_cfg_file
}

lit_unit_site_cfg_file = "$root_gen_dir/lld/test/Unit/lit.site.cfg.py"
write_lit_config("lit_unit_site_cfg") {
  input = "//lld/test/Unit/lit.site.cfg.py.in"
  output = lit_unit_site_cfg_file
}

# FIXME: omit from build by default since it's always dirty?
# FIXME: should it be always dirty? Or could lit write a depfile of all
#        test inputs? Hm, would require compiler to write depfiles for all
#        inputs encountered during running tests too, or lit would have to add
#        files below Inputs/ to its depfile.
action("check-lld") {
  script = "$root_out_dir/llvm-lit"
  args = [
    "-sv",
    "--param",
    "lld_site_config=" + rebase_path(lit_site_cfg_file, root_out_dir),
    "--param",
    "lld_unit_site_config=" + rebase_path(lit_unit_site_cfg_file, root_out_dir),
    rebase_path(".", root_out_dir),
  ]
  outputs = [
    "$target_gen_dir/run-lit",  # Non-existing, so that ninja runs it each time.
  ]
  deps = [
    ":lit_site_cfg",
    ":lit_unit_site_cfg",
    "//lld/tools/lld",
    "//lld/unittests",
    "//llvm/tools/llc",
    "//llvm/tools/llvm-ar",
    "//llvm/tools/llvm-ar:llvm-lib",
    "//llvm/tools/llvm-as",
    "//llvm/tools/llvm-config",
    "//llvm/tools/llvm-dis",
    "//llvm/tools/llvm-dwarfdump",
    "//llvm/tools/llvm-mc",
    "//llvm/tools/llvm-nm",
    "//llvm/tools/llvm-objdump",
    "//llvm/tools/llvm-pdbutil",
    "//llvm/tools/llvm-readobj",
    "//llvm/tools/obj2yaml",
    "//llvm/tools/opt",
    "//llvm/tools/yaml2obj",
    "//llvm/utils/FileCheck",
    "//llvm/utils/count",
    "//llvm/utils/llvm-lit",
    "//llvm/utils/not",
  ]
  testonly = true

  # FIXME: console pool
}

# Empty default target that 'all' in //BUILD.gn can depend on.
# check-lld is testonly, and I don't want to mark 'all' testonly.
group("test") {
}
